<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:mvc="http://www.springframework.org/schema/mvc"

	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	                    http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
	                    http://www.springframework.org/schema/context
                        http://www.springframework.org/schema/context/spring-context-4.1.xsd
                        http://www.springframework.org/schema/tx 
                        http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
                        http://www.springframework.org/schema/mvc
                        http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd">

    <!-- 引入配置文件 -->
	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location" value="classpath:db.properties" />
	</bean>

<!-- 	<import resource="classpath:com/jk1205/cfg/spring/*.xml" /> -->
	<!-- 容器中激活元数据配置 -->
	<context:annotation-config />
	<!-- 指定spring扫描元数据的路径 -->
	<context:component-scan base-package="com.jk1205.ctr" />
	<context:component-scan base-package="com.jk1205.service" />
<!-- 	<context:component-scan base-package="com.jk1205.spring" /> -->

	<!-- 显式使用元数据驱动:springMVC元数据配置 -->
	<mvc:annotation-driven></mvc:annotation-driven>

    <!-- 静态资源解析,包含：/js、/css,/imgs -->
    <mvc:resources location="/js/" mapping="/js/**"/>
    <mvc:resources location="/css/" mapping="/css/**"/>
    <mvc:resources location="/imgs/" mapping="/imgs/**"/>
    <mvc:resources location="/themes/" mapping="/themes/**"/>
   <mvc:resources location="/images/" mapping="/images/**"/>
   <mvc:resources location="/err/" mapping="/err/**"/>



	<!-- 数据源配置, 使用 Druid 数据库连接池 -->
	<bean id="dataSourceDruid" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<!-- 数据源驱动类可不写，Druid默认会自动根据URL识别DriverClass -->
		<property name="driverClassName" value="${jdbc.driver}" />

		<!-- 基本属性 url、user、password -->
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />

		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="3" />
		<property name="minIdle" value="3" />
		<property name="maxActive" value="20" />

		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="60000" />

		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />

		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />

		<property name="validationQuery" value="SELECT 'x'" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />

		<!-- 打开PSCache，并且指定每个连接上PSCache的大小（Oracle使用） <property name="poolPreparedStatements" 
			value="true" /> <property name="maxPoolPreparedStatementPerConnectionSize" 
			value="20" /> -->

		<!-- 配置监控统计拦截的filters -->
		<property name="filters" value="stat" />
	</bean>

    <!-- 可写的SessionFactory sqlWriteSessionFactory -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
	    <property name="dataSource" ref="dataSourceDruid" />
		<property name="configLocation"  value="classpath:mybatis-config.xml" />
		<property name="mapperLocations" value="classpath:com/jk1205/dao/mapper/*.xml"/>
	</bean>
    
    <!-- 把映射xml+dao的接口生成dao类的Configurer -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.jk1205.dao"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>
    
	<!-- 声明式事务管理器 -->
	<bean id="txManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSourceDruid" />
	</bean>
	<!-- 容器使用元数据配置事务 -->
	<tx:annotation-driven transaction-manager="txManager" />

	   <!-- upload -->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="maxUploadSize">
          <!-- 上传文件的大小  10M-->
            <value>10485760</value>
        </property>
    </bean>

</beans>